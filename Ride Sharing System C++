#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Base Ride class
class Ride {
protected:
    string rideID;
    string pickupLocation;
    string dropoffLocation;
    double distance;

public:
    Ride(string id, string pickup, string dropoff, double dist)
        : rideID(id), pickupLocation(pickup), dropoffLocation(dropoff), distance(dist) {}
    virtual double fare() const = 0;
    virtual void rideDetails() const {
        cout << "Ride ID: " << rideID << "\nPickup: " << pickupLocation
             << "\nDropoff: " << dropoffLocation << "\nDistance: " << distance << " miles\n";
    }

    virtual ~Ride() {}
};

// Standard Ride subclass
class StandardRide : public Ride {
public:
    StandardRide(string id, string pickup, string dropoff, double dist)
        : Ride(id, pickup, dropoff, dist) {}

    double fare() const override {
        return distance * 1.5;
    }

    void rideDetails() const override {
        Ride::rideDetails();
        cout << "Type: Standard Ride\nFare: $" << fare() << "\n\n";
    }
};

// Premium Ride subclass
class PremiumRide : public Ride {
public:
    PremiumRide(string id, string pickup, string dropoff, double dist)
        : Ride(id, pickup, dropoff, dist) {}

    double fare() const override {
        return distance * 3.0;
    }

    void rideDetails() const override {
        Ride::rideDetails();
        cout << "Type: Premium Ride\nFare: $" << fare() << "\n\n";
    }
};

// Driver class
class Driver {
private:
    string driverID;
    string name;
    double rating;
    vector<Ride*> assignedRides;

public:
    Driver(string id, string n, double r) : driverID(id), name(n), rating(r) {}

    void addRide(Ride* ride) {
        assignedRides.push_back(ride);
    }

    void getDriverInfo() const {
        cout << "Driver ID: " << driverID << "\nName: " << name << "\nRating: " << rating << "\nAssigned Rides: " << assignedRides.size() << "\n\n";
    }
};

// Rider class
class Rider {
private:
    string riderID;
    string name;
    vector<Ride*> requestedRides;

public:
    Rider(string id, string n) : riderID(id), name(n) {}

    void requestRide(Ride* ride) {
        requestedRides.push_back(ride);
    }

    void viewRides() const {
        cout << "Rider ID: " << riderID << "\nName: " << name << "\nRequested Rides:\n";
        for (const auto& ride : requestedRides) {
            ride->rideDetails();
        }
    }
};

int main() {
    StandardRide* ride1 = new StandardRide("R001", "Downtown", "Uptown", 5);
    PremiumRide* ride2 = new PremiumRide("R002", "Airport", "Hotel", 10);

    Driver driver("D001", "Alice", 4.9);
    driver.addRide(ride1);
    driver.addRide(ride2);
    Rider rider("U001", "Bob");
    rider.requestRide(ride1);
    rider.requestRide(ride2);

    vector<Ride*> rides = {ride1, ride2};
    for (Ride* r : rides) {
        r->rideDetails(); // polymorphic call
    }

    cout << "\n--- Driver Info ---\n";
    driver.getDriverInfo();

    cout << "\n--- Rider Ride History ---\n";
    rider.viewRides();

    delete ride1;
    delete ride2;

    return 0;
}
